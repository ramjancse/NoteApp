---
openapi: 3.0.0
info:
  title: Notes App API
  description: Notes App API with Node.js
  contact:
    name: Ramjan Ali
    url: https://arpcreative.com
    email: info@arpcreative.com
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/RAMJANCSE_1/notes-app-api/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:4000/api/v1
  description: Dev
tags:
- name: Auth
  description: Authentication Endpoints
- name: Notes
  description: Notes Endpoints
- name: Category
  description: Category Endpoints
paths:
  /auth/register:
    post:
      tags:
      - Auth
      description: Create of a new account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_signup_body'
      responses:
        "201":
          description: Signup Successfull
          content:
            appliation/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
  /auth/login:
    post:
      tags:
      - Auth
      description: Login to your account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_signin_body'
      responses:
        "200":
          description: Signin Successfull
          content:
            appliation/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
  /notes:
    get:
      tags:
      - Notes
      description: Retrive all Notes
      parameters:
      - name: page
        in: query
        description: current page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 2
      - name: limit
        in: query
        description: maximum items to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 10
      - name: sort_type
        in: query
        description: the type of sort (asc or dsc)
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: dsc
          enum:
          - asc
          - dsc
      - name: sort_by
        in: query
        description: sort key
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: updatedAt
      - name: search
        in: query
        description: search terms
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: title
      responses:
        "200":
          description: Return a list of Notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    post:
      tags:
      - Notes
      description: Create a New Notes
      operationId: Create a new Note
      requestBody:
        description: To create a new Note must need to provide valis data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notes_body'
      responses:
        "201":
          description: Successfully created a new Note
          content:
            appliation/json:
              schema:
                $ref: '#/components/schemas/NoteCreateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /notes/{id}:
    get:
      tags:
      - Notes
      description: Fetch a single Note
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: '6505c5282004073453bf093f'
      - name: expand
        in: query
        description: expand author
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: author
      responses:
        "200":
          description: Single Note view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    put:
      tags:
      - Notes
      description: Create or update the entire Note
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: '6505c5282004073453bf093f'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notes_id_body'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteUpdateDTO'
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteCreateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    delete:
      tags:
      - Notes
      description: Delete a note by id
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: '6505c5282004073453bf093f'
      responses:
        "204":
          description: Note delete
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Notes
      description: Partially update a Note
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: '6505c5282004073453bf093f'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notes_id_body_1'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteUpdateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /categories:
    get:
      tags:
      - Category
      description: Retrive all categories
      parameters:
      - name: page
        in: query
        description: current page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 2
      - name: limit
        in: query
        description: maximum items to be returned
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 10
      - name: sort_type
        in: query
        description: the type of sort (asc or dsc)
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: dsc
          enum:
          - asc
          - dsc
      - name: sort_by
        in: query
        description: sort key
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: updatedAt
      - name: search
        in: query
        description: search terms
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: title
      responses:
        "200":
          description: Return a list of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    post:
      tags:
      - Category
      description: Create a New Category
      operationId: Create a new Category
      requestBody:
        description: To create a new Category must need to provide valis data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_body'
      responses:
        "201":
          description: Successfully created a new Category
          content:
            appliation/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /categories/{id}:
    get:
      tags:
      - Category
      description: Fetch a single Note
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      - name: expand
        in: query
        description: expand author
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: author
      responses:
        "200":
          description: Single Category view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    put:
      tags:
      - Category
      description: Create or update the Category
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_id_body'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateDTO'
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    delete:
      tags:
      - Category
      description: Delete a category by id
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "204":
          description: Category delete
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Category
      description: Partially update a Category
      parameters:
      - name: id
        in: path
        description: It will be Note ID
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_id_body_1'
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: Internal Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
components:
  schemas:
    Note:
      allOf:
      - required:
        - authorId
        - description
        - id
        - status
        - title
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          authorId:
            type: integer
            format: int32
            example: 1
          categoryId:
            type: integer
            format: int32
            example: 1
          title:
            type: string
            example: First Note
          description:
            type: string
            example: The body of a note
          status:
            type: string
            example: not_completed
            enum:
            - completed
            - not_completed
      - $ref: '#/components/schemas/Timestamp'
    Category:
      allOf:
      - required:
        - authorId
        - description
        - id
        - name
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          authorId:
            type: integer
            format: int32
            example: 1
          name:
            type: string
            example: First Category
          description:
            type: string
            example: The body of a Category
      - $ref: '#/components/schemas/Timestamp'
    NoteCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Note created succesfully
        data:
          $ref: '#/components/schemas/Note'
        links:
          $ref: '#/components/schemas/NoteCreateDTO_links'
    CategoryCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Category created succesfully
        data:
          $ref: '#/components/schemas/Category'
        links:
          $ref: '#/components/schemas/CategoryCreateDTO_links'
    NoteUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: note Successfully updated
        data:
          $ref: '#/components/schemas/Note'
        links:
          $ref: '#/components/schemas/NoteUpdateDTO_links'
    CategoryUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Category Successfully updated
        data:
          $ref: '#/components/schemas/Category'
        links:
          $ref: '#/components/schemas/CategoryUpdateDTO_links'
    Timestamp:
      required:
      - createdAt
      - updatedAt
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
    pagination:
      required:
      - limit
      - page
      - totalItems
      - totalPage
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
    AuthorDTO:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: author name
    auth_signup_body:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          type: string
          example: Ramjan Ali
        email:
          type: string
          format: email
          example: ramjan@example.com
        password:
          type: string
          format: password
          example: password123
    inline_response_201:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: Signup Successfull
        data:
          $ref: '#/components/schemas/inline_response_201_data'
        links:
          $ref: '#/components/schemas/inline_response_201_links'
    inline_response_400:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        error:
          type: string
          example: Bad request
        data:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_400_data'
    inline_response_500:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        error:
          type: string
          example: Internal server error
        message:
          type: string
          example: We are sorry for inconvenience. Please try again latter.
    auth_signin_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: ramjan@example.com
        password:
          type: string
          format: password
          example: password123
    inline_response_201_1:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Signup Successfull
        data:
          $ref: '#/components/schemas/inline_response_201_data'
        links:
          $ref: '#/components/schemas/inline_response_201_1_links'
    inline_response_200:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
            - required:
              - author
              - id
              - title
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                authorId:
                  type: integer
                  format: int32
                  example: 1
                categoryId:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: Note one
                description:
                  type: string
                  format: string
                  example: This is description
                status:
                  type: string
                  example: not_completed
                  enum:
                  - completed
                  - not_completed
                author:
                  $ref: '#/components/schemas/AuthorDTO'
                link:
                  type: string
                  format: url
                  example: /notes/1
            - $ref: '#/components/schemas/Timestamp'
        pagination:
          $ref: '#/components/schemas/pagination'
        links:
          $ref: '#/components/schemas/inline_response_200_links'
    notes_body:
      required:
      - description
      - title
      type: object
      properties:
        title:
          type: string
          example: Note one
        description:
          type: string
          example: body of a note
        status:
          type: string
          example: not_completed
          enum:
          - completed
          - not_completed
    inline_response_401:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You don't have the right permission.
    inline_response_200_1:
      type: object
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/Note'
          - type: object
            properties:
              author:
                $ref: '#/components/schemas/AuthorDTO'
        links:
          $ref: '#/components/schemas/inline_response_200_1_links'
    inline_response_404:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        error:
          type: string
          example: Not found
        message:
          type: string
          example: resource not found.
    notes_id_body:
      required:
      - description
      - title
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: note title
        description:
          type: string
          format: text
          example: body
        status:
          type: string
          example: not_completed
          enum:
          - completed
          - not_completed
    notes_id_body_1:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Note title
        description:
          type: string
          format: text
          example: body
        status:
          type: string
          example: not_completed
          enum:
          - completed
          - not_completed
    inline_response_200_2:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
            - required:
              - author
              - id
              - name
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                authorId:
                  type: integer
                  format: int32
                  example: 1
                name:
                  type: string
                  example: Category one
                description:
                  type: string
                  format: string
                  example: This is description
                author:
                  $ref: '#/components/schemas/AuthorDTO'
                link:
                  type: string
                  format: url
                  example: /categories/1
            - $ref: '#/components/schemas/Timestamp'
        pagination:
          $ref: '#/components/schemas/pagination'
        links:
          $ref: '#/components/schemas/inline_response_200_2_links'
    categories_body:
      required:
      - description
      - name
      type: object
      properties:
        name:
          type: string
          example: Category one
        description:
          type: string
          example: body of a note
    inline_response_200_3:
      type: object
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/Category'
          - type: object
            properties:
              author:
                $ref: '#/components/schemas/AuthorDTO'
        links:
          $ref: '#/components/schemas/inline_response_200_3_links'
    categories_id_body:
      required:
      - description
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Category name
        description:
          type: string
          format: text
          example: body
    categories_id_body_1:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Note title
        description:
          type: string
          format: text
          example: body
    NoteCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /notes/1
        author:
          type: string
          format: url
          example: /notes/1/author
    CategoryCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /categories/1
        author:
          type: string
          format: url
          example: /categories/1/author
    NoteUpdateDTO_links:
      type: object
      properties:
        self:
          type: string
          example: /notes/1
    CategoryUpdateDTO_links:
      type: object
      properties:
        self:
          type: string
          example: /categories/1
    inline_response_201_data:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    inline_response_201_links:
      type: object
      properties:
        self:
          type: object
          example: auth/register
        signin:
          type: object
          example: auth/login
    inline_response_400_data:
      type: object
      properties:
        field:
          type: string
          example: email
        message:
          type: string
          example: Invalid Email
        in:
          type: string
          example: body
          enum:
          - query
          - body
    inline_response_201_1_links:
      type: object
      properties:
        self:
          type: object
          example: auth/sigin
    inline_response_200_links:
      type: object
      properties:
        self:
          type: string
          format: url
        next:
          type: string
          format: url
          example: notes=3&limit=10
        prev:
          type: string
          format: url
          example: notes=1&limit=10
    inline_response_200_1_links:
      type: object
      properties:
        self:
          type: string
          example: /notes/1
        author:
          type: string
          example: /notes/1/author
    inline_response_200_2_links:
      type: object
      properties:
        self:
          type: string
          format: url
        next:
          type: string
          format: url
          example: categories=3&limit=10
        prev:
          type: string
          format: url
          example: categories=1&limit=10
    inline_response_200_3_links:
      type: object
      properties:
        self:
          type: string
          example: /categories/1
        author:
          type: string
          example: /categories/1/author
  responses:
    "500":
      description: Internal Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_500'
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
    "404":
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
  parameters:
    pageParam:
      name: page
      in: query
      description: current page number
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      name: limit
      in: query
      description: maximum items to be returned
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      name: sort_type
      in: query
      description: the type of sort (asc or dsc)
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: dsc
        enum:
        - asc
        - dsc
    sortByParam:
      name: sort_by
      in: query
      description: sort key
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: updatedAt
    searchParam:
      name: search
      in: query
      description: search terms
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: title
    idPathParam:
      name: id
      in: path
      description: It will be Note ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: '6505c5282004073453bf093f'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
